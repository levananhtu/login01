spring:
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 521013454593-ccvkbp5qp0eaad11bfei10cukt7mi9hb.apps.googleusercontent.com
            clientSecret: boVQtzRAYn6u7dBi58b-cjdL
            redirectUriTemplate: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
          facebook:
            clientId: 588379065233374
            clientSecret: 56a34941a167674cb7d7695ab55b7819
            redirectUriTemplate: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - public_profile
          github:
            clientId: 199c9c45659142b3f795
            clientSecret: 59906a0ba7c1b15b32b693af6e487ecae52f95ae
            redirectUriTemplate: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user
        provider:
          facebook:
            authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
            tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
            userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)

  datasource:
    url: jdbc:mysql://localhost:3306/test_db_ver04?useSSL=true
    username: root
    password: leviathan00
    test-while-idle: true
    validation-query: SELECT 1
    initialization-mode: always
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        show_sql: ${spring.jpa.show-sql}
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
        current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
  jackson:
    serialization: false
    time-zone: UTC
debug: true
server:
  port: 8090
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect
